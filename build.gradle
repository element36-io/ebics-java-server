buildscript {
  dependencies {
    classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
  }
}

plugins {
    id 'org.springframework.boot' 
    id 'java'
	id "com.gorylenko.gradle-git-properties"  version "2.3.1"	
	id "org.owasp.dependencycheck" 
}
//apply from: "dependencyCheck.gradle"
apply plugin: 'io.spring.dependency-management'

group = 'io.element36.cash36'
version = '1.0.0'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}

ext {
    set('springCloudVersion', springCloudVersion)
}

springBoot { buildInfo() }
build.doFirst { bootBuildInfo }
compileJava.doFirst { generateGitProperties }


// Disable generate Git Properties via environment - e.g. if we are in a Docker build
ext.generateGitProps=System.getProperty('GENERATE_GIT_PROPERTIES')
ext.generateGitProps=ext.generateGitProps==null?"true":ext.generateGitProps
println "generateGitProps:"+ext.generateGitProps
tasks.withType(com.gorylenko.GenerateGitPropertiesTask).all { enabled = new Boolean(rootProject.ext.generateGitProps) }


configurations {
    jaxb // Only for generation purpose
    execebics // for the ebics build https://discuss.gradle.org/t/how-to-choose-only-some-dependencies-to-copy-to-a-folder/19629
	execebics.transitive = true
}

dependencies {
	// java 11 jaxb
	implementation 'javax.xml.bind:jaxb-api:'+jaxbVersion
	implementation 'javax.activation:activation:1.1.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.4'
	execebics 'io.github.element36-io:ebics-cli:1.5'
	
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'junit:junit'
	implementation 'org.springdoc:springdoc-openapi-ui:1.5.8'

	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-parent:2.4.0'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// prepare structures to execute ebics jar on command line 
task copyToLib(type: Copy) {
	println "copy ebics libs to $projectDir/lib"
    from configurations.execebics
    into "$projectDir/lib"
}
task copyEbicsJar(type: Copy) {
	println "copy ebics jar to $projectDir"
    from ("$projectDir/lib") {
    	include "ebics-cli-*.jar"
    }

    into "$projectDir"

}
String stripVersion(String fileNameWithVersion) {
		String ext = fileNameWithVersion.substring(fileNameWithVersion.lastIndexOf("."),fileNameWithVersion.length())
		int end = fileNameWithVersion.lastIndexOf("-"); //assumes that: name-version.ext. Will not work with name-version-SNAPSHOT.ext
		String fileNameWithoutVersion = fileNameWithVersion.substring(0, end) + ext
		return fileNameWithoutVersion
}
build.finalizedBy(copyToLib,copyEbicsJar)

// then gradle -Dkey=value works
bootRun {
    systemProperties System.properties
}

dependencies {
    jaxb 'javax.xml.bind:jaxb-api:'+jaxbVersion
    jaxb 'com.sun.xml.bind:jaxb-xjc:'+jaxbVersion
    jaxb 'com.sun.xml.bind:jaxb-impl:'+jaxbVersion
    jaxb 'com.sun.xml.bind:jaxb-osgi:'+jaxbVersion
}

// See  https://www.iso20022.org/catalogue-messages/iso-20022-messages-archive
task generateSourcesForXsd() {
	
	doLast {
	 	File xsdDir=file("${projectDir}/src/main/resources/xsd/")
	 	xsdDir.listFiles().each {
	 		//File file -> println file.name
    		
    		String fileName=it.name
    		String packageName=it.name.replaceFirst(~/\.[^\.]+$/, '')
    		packageName=packageName.replaceAll("\\.","_")
    		packageName="io.element36.cash36.ebics.generated."+packageName
    		
    		println "generating sources for:"+fileName+", packageName:"+packageName
    		 
		
	        def jaxbTargetDir = file("src/main/java")
	
	        if (!jaxbTargetDir.exists()) {
	            jaxbTargetDir.mkdirs()
	        }
	
	        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
	
	        ant.xjc(
	                destdir: "${jaxbTargetDir}",
	                schema: "${projectDir}/src/main/resources/xsd/"+fileName,
	                removeOldOutput: 'yes', extension: 'true'
	        )
	                {
	                    arg(line: '-nv -disableXmlSecurity -p '+packageName)
	                }
	     }	
	}
}
